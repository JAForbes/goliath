// Generated by LiveScript 1.5.0
(function(){
  var defaults, view, ref$, out$ = typeof exports != 'undefined' && exports || this;
  defaults = {
    tab: {
      reset: ".dib",
      style: ".bw2",
      size: ".w3",
      shape: ".ph2",
      behaviour: ".tc"
    },
    activeTab: {
      reset: ".dib",
      style: "",
      size: "",
      shape: ".ph2",
      behaviour: ".grow"
    },
    tabPane: {
      reset: ".list.mv0.pl0",
      style: "",
      size: "",
      shape: "",
      behaviour: ".tc"
    },
    contentPane: {
      style: "",
      size: "",
      shape: "",
      behaviour: ""
    },
    container: {
      style: "",
      size: "",
      shape: "",
      behaviour: ""
    }
  };
  view = function(h){
    return function(arg$){
      var ref$, tab, ref1$, tabPane, contentPane, activeTab, container, initialTabIndex, Container, TabPane, Tab, ref2$, ActiveTab, ref3$, ContentPane, ref4$;
      ref$ = arg$ != null
        ? arg$
        : {}, tab = (ref1$ = ref$.tab) != null
        ? ref1$
        : {}, tabPane = (ref1$ = ref$.tabPane) != null
        ? ref1$
        : {}, contentPane = (ref1$ = ref$.contentPane) != null
        ? ref1$
        : {}, activeTab = (ref1$ = ref$.activeTab) != null
        ? ref1$
        : {}, container = (ref1$ = ref$.container) != null
        ? ref1$
        : {}, initialTabIndex = (ref1$ = ref$.initialTabIndex) != null ? ref1$ : 1;
      Container = [(ref$ = import$(clone$(defaults.Container), container))['size'], ref$['style'], ref$['shape'], ref$['behaviour']].join("");
      TabPane = [(ref1$ = import$(clone$(defaults.tabPane), tabPane))['size'], ref1$['style'], ref1$['shape'], ref1$['behaviour'], ref1$['reset']].join("");
      Tab = [(ref2$ = import$(clone$(defaults.tab), tab))['size'], ref2$['style'], ref2$['shape'], ref2$['behaviour'], ref2$['reset']].join("");
      ActiveTab = Tab + [(ref3$ = import$(clone$(defaults.activeTab), activeTab))['size'], ref3$['style'], ref3$['shape'], ref3$['behaviour'], ref3$['reset']].join("");
      ContentPane = [(ref4$ = import$(clone$(defaults.contentPane), contentPane))['size'], ref4$['style'], ref4$['shape'], ref4$['behaviour']].join("");
      return function(tabs, getTabId, setTabId, content, attrs){
        var currentTab, currentId, headerStyle, tab;
        attrs == null && (attrs = {});
        currentTab = getTabId()
          ? tabs.find(function(arg$){
            var id;
            id = arg$.id;
            return id === getTabId();
          })
          : tabs[0];
        currentId = currentTab.id;
        headerStyle = function(t){
          if (t.id === currentId) {
            return ActiveTab;
          } else {
            return Tab;
          }
        };
        tab = function(t, i){
          var attrs;
          attrs = {
            tabIndex: i + initialTabIndex,
            onfocus: function(){
              return setTabId(t.id);
            }
          };
          return h('li' + headerStyle(t), attrs, t.content);
        };
        return h(Container, attrs, h('ul' + TabPane, tabs.map(tab), h(ContentPane, content(currentTab))));
      };
    };
  };
  ref$ = out$;
  ref$.view = view;
  ref$.defaults = defaults;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
